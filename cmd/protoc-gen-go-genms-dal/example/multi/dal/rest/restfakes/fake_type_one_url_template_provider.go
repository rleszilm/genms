// Code generated by counterfeiter. DO NOT EDIT.
package restfakes

import (
	"sync"

	rest_dal_multi "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/multi/dal/rest"
)

type FakeTypeOneUrlTemplateProvider struct {
	AllStub        func() string
	allMutex       sync.RWMutex
	allArgsForCall []struct {
	}
	allReturns struct {
		result1 string
	}
	allReturnsOnCall map[int]struct {
		result1 string
	}
	MessageParamStub        func() string
	messageParamMutex       sync.RWMutex
	messageParamArgsForCall []struct {
	}
	messageParamReturns struct {
		result1 string
	}
	messageParamReturnsOnCall map[int]struct {
		result1 string
	}
	MultipleParamStub        func() string
	multipleParamMutex       sync.RWMutex
	multipleParamArgsForCall []struct {
	}
	multipleParamReturns struct {
		result1 string
	}
	multipleParamReturnsOnCall map[int]struct {
		result1 string
	}
	OneParamStub        func() string
	oneParamMutex       sync.RWMutex
	oneParamArgsForCall []struct {
	}
	oneParamReturns struct {
		result1 string
	}
	oneParamReturnsOnCall map[int]struct {
		result1 string
	}
	ProviderStubOnlyStub        func() string
	providerStubOnlyMutex       sync.RWMutex
	providerStubOnlyArgsForCall []struct {
	}
	providerStubOnlyReturns struct {
		result1 string
	}
	providerStubOnlyReturnsOnCall map[int]struct {
		result1 string
	}
	WithComparatorStub        func() string
	withComparatorMutex       sync.RWMutex
	withComparatorArgsForCall []struct {
	}
	withComparatorReturns struct {
		result1 string
	}
	withComparatorReturnsOnCall map[int]struct {
		result1 string
	}
	WithRestStub        func() string
	withRestMutex       sync.RWMutex
	withRestArgsForCall []struct {
	}
	withRestReturns struct {
		result1 string
	}
	withRestReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTypeOneUrlTemplateProvider) All() string {
	fake.allMutex.Lock()
	ret, specificReturn := fake.allReturnsOnCall[len(fake.allArgsForCall)]
	fake.allArgsForCall = append(fake.allArgsForCall, struct {
	}{})
	fake.recordInvocation("All", []interface{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.allReturns
	return fakeReturns.result1
}

func (fake *FakeTypeOneUrlTemplateProvider) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeTypeOneUrlTemplateProvider) AllCalls(stub func() string) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = stub
}

func (fake *FakeTypeOneUrlTemplateProvider) AllReturns(result1 string) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) AllReturnsOnCall(i int, result1 string) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	if fake.allReturnsOnCall == nil {
		fake.allReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.allReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) MessageParam() string {
	fake.messageParamMutex.Lock()
	ret, specificReturn := fake.messageParamReturnsOnCall[len(fake.messageParamArgsForCall)]
	fake.messageParamArgsForCall = append(fake.messageParamArgsForCall, struct {
	}{})
	fake.recordInvocation("MessageParam", []interface{}{})
	fake.messageParamMutex.Unlock()
	if fake.MessageParamStub != nil {
		return fake.MessageParamStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.messageParamReturns
	return fakeReturns.result1
}

func (fake *FakeTypeOneUrlTemplateProvider) MessageParamCallCount() int {
	fake.messageParamMutex.RLock()
	defer fake.messageParamMutex.RUnlock()
	return len(fake.messageParamArgsForCall)
}

func (fake *FakeTypeOneUrlTemplateProvider) MessageParamCalls(stub func() string) {
	fake.messageParamMutex.Lock()
	defer fake.messageParamMutex.Unlock()
	fake.MessageParamStub = stub
}

func (fake *FakeTypeOneUrlTemplateProvider) MessageParamReturns(result1 string) {
	fake.messageParamMutex.Lock()
	defer fake.messageParamMutex.Unlock()
	fake.MessageParamStub = nil
	fake.messageParamReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) MessageParamReturnsOnCall(i int, result1 string) {
	fake.messageParamMutex.Lock()
	defer fake.messageParamMutex.Unlock()
	fake.MessageParamStub = nil
	if fake.messageParamReturnsOnCall == nil {
		fake.messageParamReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.messageParamReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) MultipleParam() string {
	fake.multipleParamMutex.Lock()
	ret, specificReturn := fake.multipleParamReturnsOnCall[len(fake.multipleParamArgsForCall)]
	fake.multipleParamArgsForCall = append(fake.multipleParamArgsForCall, struct {
	}{})
	fake.recordInvocation("MultipleParam", []interface{}{})
	fake.multipleParamMutex.Unlock()
	if fake.MultipleParamStub != nil {
		return fake.MultipleParamStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.multipleParamReturns
	return fakeReturns.result1
}

func (fake *FakeTypeOneUrlTemplateProvider) MultipleParamCallCount() int {
	fake.multipleParamMutex.RLock()
	defer fake.multipleParamMutex.RUnlock()
	return len(fake.multipleParamArgsForCall)
}

func (fake *FakeTypeOneUrlTemplateProvider) MultipleParamCalls(stub func() string) {
	fake.multipleParamMutex.Lock()
	defer fake.multipleParamMutex.Unlock()
	fake.MultipleParamStub = stub
}

func (fake *FakeTypeOneUrlTemplateProvider) MultipleParamReturns(result1 string) {
	fake.multipleParamMutex.Lock()
	defer fake.multipleParamMutex.Unlock()
	fake.MultipleParamStub = nil
	fake.multipleParamReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) MultipleParamReturnsOnCall(i int, result1 string) {
	fake.multipleParamMutex.Lock()
	defer fake.multipleParamMutex.Unlock()
	fake.MultipleParamStub = nil
	if fake.multipleParamReturnsOnCall == nil {
		fake.multipleParamReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.multipleParamReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) OneParam() string {
	fake.oneParamMutex.Lock()
	ret, specificReturn := fake.oneParamReturnsOnCall[len(fake.oneParamArgsForCall)]
	fake.oneParamArgsForCall = append(fake.oneParamArgsForCall, struct {
	}{})
	fake.recordInvocation("OneParam", []interface{}{})
	fake.oneParamMutex.Unlock()
	if fake.OneParamStub != nil {
		return fake.OneParamStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.oneParamReturns
	return fakeReturns.result1
}

func (fake *FakeTypeOneUrlTemplateProvider) OneParamCallCount() int {
	fake.oneParamMutex.RLock()
	defer fake.oneParamMutex.RUnlock()
	return len(fake.oneParamArgsForCall)
}

func (fake *FakeTypeOneUrlTemplateProvider) OneParamCalls(stub func() string) {
	fake.oneParamMutex.Lock()
	defer fake.oneParamMutex.Unlock()
	fake.OneParamStub = stub
}

func (fake *FakeTypeOneUrlTemplateProvider) OneParamReturns(result1 string) {
	fake.oneParamMutex.Lock()
	defer fake.oneParamMutex.Unlock()
	fake.OneParamStub = nil
	fake.oneParamReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) OneParamReturnsOnCall(i int, result1 string) {
	fake.oneParamMutex.Lock()
	defer fake.oneParamMutex.Unlock()
	fake.OneParamStub = nil
	if fake.oneParamReturnsOnCall == nil {
		fake.oneParamReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.oneParamReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) ProviderStubOnly() string {
	fake.providerStubOnlyMutex.Lock()
	ret, specificReturn := fake.providerStubOnlyReturnsOnCall[len(fake.providerStubOnlyArgsForCall)]
	fake.providerStubOnlyArgsForCall = append(fake.providerStubOnlyArgsForCall, struct {
	}{})
	fake.recordInvocation("ProviderStubOnly", []interface{}{})
	fake.providerStubOnlyMutex.Unlock()
	if fake.ProviderStubOnlyStub != nil {
		return fake.ProviderStubOnlyStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.providerStubOnlyReturns
	return fakeReturns.result1
}

func (fake *FakeTypeOneUrlTemplateProvider) ProviderStubOnlyCallCount() int {
	fake.providerStubOnlyMutex.RLock()
	defer fake.providerStubOnlyMutex.RUnlock()
	return len(fake.providerStubOnlyArgsForCall)
}

func (fake *FakeTypeOneUrlTemplateProvider) ProviderStubOnlyCalls(stub func() string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = stub
}

func (fake *FakeTypeOneUrlTemplateProvider) ProviderStubOnlyReturns(result1 string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = nil
	fake.providerStubOnlyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) ProviderStubOnlyReturnsOnCall(i int, result1 string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = nil
	if fake.providerStubOnlyReturnsOnCall == nil {
		fake.providerStubOnlyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.providerStubOnlyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) WithComparator() string {
	fake.withComparatorMutex.Lock()
	ret, specificReturn := fake.withComparatorReturnsOnCall[len(fake.withComparatorArgsForCall)]
	fake.withComparatorArgsForCall = append(fake.withComparatorArgsForCall, struct {
	}{})
	fake.recordInvocation("WithComparator", []interface{}{})
	fake.withComparatorMutex.Unlock()
	if fake.WithComparatorStub != nil {
		return fake.WithComparatorStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.withComparatorReturns
	return fakeReturns.result1
}

func (fake *FakeTypeOneUrlTemplateProvider) WithComparatorCallCount() int {
	fake.withComparatorMutex.RLock()
	defer fake.withComparatorMutex.RUnlock()
	return len(fake.withComparatorArgsForCall)
}

func (fake *FakeTypeOneUrlTemplateProvider) WithComparatorCalls(stub func() string) {
	fake.withComparatorMutex.Lock()
	defer fake.withComparatorMutex.Unlock()
	fake.WithComparatorStub = stub
}

func (fake *FakeTypeOneUrlTemplateProvider) WithComparatorReturns(result1 string) {
	fake.withComparatorMutex.Lock()
	defer fake.withComparatorMutex.Unlock()
	fake.WithComparatorStub = nil
	fake.withComparatorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) WithComparatorReturnsOnCall(i int, result1 string) {
	fake.withComparatorMutex.Lock()
	defer fake.withComparatorMutex.Unlock()
	fake.WithComparatorStub = nil
	if fake.withComparatorReturnsOnCall == nil {
		fake.withComparatorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.withComparatorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) WithRest() string {
	fake.withRestMutex.Lock()
	ret, specificReturn := fake.withRestReturnsOnCall[len(fake.withRestArgsForCall)]
	fake.withRestArgsForCall = append(fake.withRestArgsForCall, struct {
	}{})
	fake.recordInvocation("WithRest", []interface{}{})
	fake.withRestMutex.Unlock()
	if fake.WithRestStub != nil {
		return fake.WithRestStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.withRestReturns
	return fakeReturns.result1
}

func (fake *FakeTypeOneUrlTemplateProvider) WithRestCallCount() int {
	fake.withRestMutex.RLock()
	defer fake.withRestMutex.RUnlock()
	return len(fake.withRestArgsForCall)
}

func (fake *FakeTypeOneUrlTemplateProvider) WithRestCalls(stub func() string) {
	fake.withRestMutex.Lock()
	defer fake.withRestMutex.Unlock()
	fake.WithRestStub = stub
}

func (fake *FakeTypeOneUrlTemplateProvider) WithRestReturns(result1 string) {
	fake.withRestMutex.Lock()
	defer fake.withRestMutex.Unlock()
	fake.WithRestStub = nil
	fake.withRestReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) WithRestReturnsOnCall(i int, result1 string) {
	fake.withRestMutex.Lock()
	defer fake.withRestMutex.Unlock()
	fake.WithRestStub = nil
	if fake.withRestReturnsOnCall == nil {
		fake.withRestReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.withRestReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeOneUrlTemplateProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.messageParamMutex.RLock()
	defer fake.messageParamMutex.RUnlock()
	fake.multipleParamMutex.RLock()
	defer fake.multipleParamMutex.RUnlock()
	fake.oneParamMutex.RLock()
	defer fake.oneParamMutex.RUnlock()
	fake.providerStubOnlyMutex.RLock()
	defer fake.providerStubOnlyMutex.RUnlock()
	fake.withComparatorMutex.RLock()
	defer fake.withComparatorMutex.RUnlock()
	fake.withRestMutex.RLock()
	defer fake.withRestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTypeOneUrlTemplateProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rest_dal_multi.TypeOneUrlTemplateProvider = new(FakeTypeOneUrlTemplateProvider)
