// Code generated by counterfeiter. DO NOT EDIT.
package postgresfakes

import (
	"sync"

	postgres_dal_multi "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/multi/dal/sql/postgres"
)

type FakeTypeTwoQueryTemplateProvider struct {
	AllStub        func() string
	allMutex       sync.RWMutex
	allArgsForCall []struct {
	}
	allReturns struct {
		result1 string
	}
	allReturnsOnCall map[int]struct {
		result1 string
	}
	InsertStub        func() string
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
	}
	insertReturns struct {
		result1 string
	}
	insertReturnsOnCall map[int]struct {
		result1 string
	}
	MessageParamStub        func() string
	messageParamMutex       sync.RWMutex
	messageParamArgsForCall []struct {
	}
	messageParamReturns struct {
		result1 string
	}
	messageParamReturnsOnCall map[int]struct {
		result1 string
	}
	MultipleParamStub        func() string
	multipleParamMutex       sync.RWMutex
	multipleParamArgsForCall []struct {
	}
	multipleParamReturns struct {
		result1 string
	}
	multipleParamReturnsOnCall map[int]struct {
		result1 string
	}
	OneParamStub        func() string
	oneParamMutex       sync.RWMutex
	oneParamArgsForCall []struct {
	}
	oneParamReturns struct {
		result1 string
	}
	oneParamReturnsOnCall map[int]struct {
		result1 string
	}
	ProviderStubOnlyStub        func() string
	providerStubOnlyMutex       sync.RWMutex
	providerStubOnlyArgsForCall []struct {
	}
	providerStubOnlyReturns struct {
		result1 string
	}
	providerStubOnlyReturnsOnCall map[int]struct {
		result1 string
	}
	UpdateStub        func() string
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
	}
	updateReturns struct {
		result1 string
	}
	updateReturnsOnCall map[int]struct {
		result1 string
	}
	UpsertStub        func() string
	upsertMutex       sync.RWMutex
	upsertArgsForCall []struct {
	}
	upsertReturns struct {
		result1 string
	}
	upsertReturnsOnCall map[int]struct {
		result1 string
	}
	WithComparatorStub        func() string
	withComparatorMutex       sync.RWMutex
	withComparatorArgsForCall []struct {
	}
	withComparatorReturns struct {
		result1 string
	}
	withComparatorReturnsOnCall map[int]struct {
		result1 string
	}
	WithRestStub        func() string
	withRestMutex       sync.RWMutex
	withRestArgsForCall []struct {
	}
	withRestReturns struct {
		result1 string
	}
	withRestReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTypeTwoQueryTemplateProvider) All() string {
	fake.allMutex.Lock()
	ret, specificReturn := fake.allReturnsOnCall[len(fake.allArgsForCall)]
	fake.allArgsForCall = append(fake.allArgsForCall, struct {
	}{})
	fake.recordInvocation("All", []interface{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.allReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) AllCalls(stub func() string) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) AllReturns(result1 string) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) AllReturnsOnCall(i int, result1 string) {
	fake.allMutex.Lock()
	defer fake.allMutex.Unlock()
	fake.AllStub = nil
	if fake.allReturnsOnCall == nil {
		fake.allReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.allReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) Insert() string {
	fake.insertMutex.Lock()
	ret, specificReturn := fake.insertReturnsOnCall[len(fake.insertArgsForCall)]
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
	}{})
	fake.recordInvocation("Insert", []interface{}{})
	fake.insertMutex.Unlock()
	if fake.InsertStub != nil {
		return fake.InsertStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.insertReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) InsertCalls(stub func() string) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) InsertReturns(result1 string) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) InsertReturnsOnCall(i int, result1 string) {
	fake.insertMutex.Lock()
	defer fake.insertMutex.Unlock()
	fake.InsertStub = nil
	if fake.insertReturnsOnCall == nil {
		fake.insertReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.insertReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) MessageParam() string {
	fake.messageParamMutex.Lock()
	ret, specificReturn := fake.messageParamReturnsOnCall[len(fake.messageParamArgsForCall)]
	fake.messageParamArgsForCall = append(fake.messageParamArgsForCall, struct {
	}{})
	fake.recordInvocation("MessageParam", []interface{}{})
	fake.messageParamMutex.Unlock()
	if fake.MessageParamStub != nil {
		return fake.MessageParamStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.messageParamReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) MessageParamCallCount() int {
	fake.messageParamMutex.RLock()
	defer fake.messageParamMutex.RUnlock()
	return len(fake.messageParamArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) MessageParamCalls(stub func() string) {
	fake.messageParamMutex.Lock()
	defer fake.messageParamMutex.Unlock()
	fake.MessageParamStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) MessageParamReturns(result1 string) {
	fake.messageParamMutex.Lock()
	defer fake.messageParamMutex.Unlock()
	fake.MessageParamStub = nil
	fake.messageParamReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) MessageParamReturnsOnCall(i int, result1 string) {
	fake.messageParamMutex.Lock()
	defer fake.messageParamMutex.Unlock()
	fake.MessageParamStub = nil
	if fake.messageParamReturnsOnCall == nil {
		fake.messageParamReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.messageParamReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) MultipleParam() string {
	fake.multipleParamMutex.Lock()
	ret, specificReturn := fake.multipleParamReturnsOnCall[len(fake.multipleParamArgsForCall)]
	fake.multipleParamArgsForCall = append(fake.multipleParamArgsForCall, struct {
	}{})
	fake.recordInvocation("MultipleParam", []interface{}{})
	fake.multipleParamMutex.Unlock()
	if fake.MultipleParamStub != nil {
		return fake.MultipleParamStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.multipleParamReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) MultipleParamCallCount() int {
	fake.multipleParamMutex.RLock()
	defer fake.multipleParamMutex.RUnlock()
	return len(fake.multipleParamArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) MultipleParamCalls(stub func() string) {
	fake.multipleParamMutex.Lock()
	defer fake.multipleParamMutex.Unlock()
	fake.MultipleParamStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) MultipleParamReturns(result1 string) {
	fake.multipleParamMutex.Lock()
	defer fake.multipleParamMutex.Unlock()
	fake.MultipleParamStub = nil
	fake.multipleParamReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) MultipleParamReturnsOnCall(i int, result1 string) {
	fake.multipleParamMutex.Lock()
	defer fake.multipleParamMutex.Unlock()
	fake.MultipleParamStub = nil
	if fake.multipleParamReturnsOnCall == nil {
		fake.multipleParamReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.multipleParamReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) OneParam() string {
	fake.oneParamMutex.Lock()
	ret, specificReturn := fake.oneParamReturnsOnCall[len(fake.oneParamArgsForCall)]
	fake.oneParamArgsForCall = append(fake.oneParamArgsForCall, struct {
	}{})
	fake.recordInvocation("OneParam", []interface{}{})
	fake.oneParamMutex.Unlock()
	if fake.OneParamStub != nil {
		return fake.OneParamStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.oneParamReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) OneParamCallCount() int {
	fake.oneParamMutex.RLock()
	defer fake.oneParamMutex.RUnlock()
	return len(fake.oneParamArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) OneParamCalls(stub func() string) {
	fake.oneParamMutex.Lock()
	defer fake.oneParamMutex.Unlock()
	fake.OneParamStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) OneParamReturns(result1 string) {
	fake.oneParamMutex.Lock()
	defer fake.oneParamMutex.Unlock()
	fake.OneParamStub = nil
	fake.oneParamReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) OneParamReturnsOnCall(i int, result1 string) {
	fake.oneParamMutex.Lock()
	defer fake.oneParamMutex.Unlock()
	fake.OneParamStub = nil
	if fake.oneParamReturnsOnCall == nil {
		fake.oneParamReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.oneParamReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) ProviderStubOnly() string {
	fake.providerStubOnlyMutex.Lock()
	ret, specificReturn := fake.providerStubOnlyReturnsOnCall[len(fake.providerStubOnlyArgsForCall)]
	fake.providerStubOnlyArgsForCall = append(fake.providerStubOnlyArgsForCall, struct {
	}{})
	fake.recordInvocation("ProviderStubOnly", []interface{}{})
	fake.providerStubOnlyMutex.Unlock()
	if fake.ProviderStubOnlyStub != nil {
		return fake.ProviderStubOnlyStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.providerStubOnlyReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) ProviderStubOnlyCallCount() int {
	fake.providerStubOnlyMutex.RLock()
	defer fake.providerStubOnlyMutex.RUnlock()
	return len(fake.providerStubOnlyArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) ProviderStubOnlyCalls(stub func() string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) ProviderStubOnlyReturns(result1 string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = nil
	fake.providerStubOnlyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) ProviderStubOnlyReturnsOnCall(i int, result1 string) {
	fake.providerStubOnlyMutex.Lock()
	defer fake.providerStubOnlyMutex.Unlock()
	fake.ProviderStubOnlyStub = nil
	if fake.providerStubOnlyReturnsOnCall == nil {
		fake.providerStubOnlyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.providerStubOnlyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) Update() string {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
	}{})
	fake.recordInvocation("Update", []interface{}{})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpdateCalls(stub func() string) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpdateReturns(result1 string) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpdateReturnsOnCall(i int, result1 string) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) Upsert() string {
	fake.upsertMutex.Lock()
	ret, specificReturn := fake.upsertReturnsOnCall[len(fake.upsertArgsForCall)]
	fake.upsertArgsForCall = append(fake.upsertArgsForCall, struct {
	}{})
	fake.recordInvocation("Upsert", []interface{}{})
	fake.upsertMutex.Unlock()
	if fake.UpsertStub != nil {
		return fake.UpsertStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.upsertReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpsertCallCount() int {
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	return len(fake.upsertArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpsertCalls(stub func() string) {
	fake.upsertMutex.Lock()
	defer fake.upsertMutex.Unlock()
	fake.UpsertStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpsertReturns(result1 string) {
	fake.upsertMutex.Lock()
	defer fake.upsertMutex.Unlock()
	fake.UpsertStub = nil
	fake.upsertReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) UpsertReturnsOnCall(i int, result1 string) {
	fake.upsertMutex.Lock()
	defer fake.upsertMutex.Unlock()
	fake.UpsertStub = nil
	if fake.upsertReturnsOnCall == nil {
		fake.upsertReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.upsertReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithComparator() string {
	fake.withComparatorMutex.Lock()
	ret, specificReturn := fake.withComparatorReturnsOnCall[len(fake.withComparatorArgsForCall)]
	fake.withComparatorArgsForCall = append(fake.withComparatorArgsForCall, struct {
	}{})
	fake.recordInvocation("WithComparator", []interface{}{})
	fake.withComparatorMutex.Unlock()
	if fake.WithComparatorStub != nil {
		return fake.WithComparatorStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.withComparatorReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithComparatorCallCount() int {
	fake.withComparatorMutex.RLock()
	defer fake.withComparatorMutex.RUnlock()
	return len(fake.withComparatorArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithComparatorCalls(stub func() string) {
	fake.withComparatorMutex.Lock()
	defer fake.withComparatorMutex.Unlock()
	fake.WithComparatorStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithComparatorReturns(result1 string) {
	fake.withComparatorMutex.Lock()
	defer fake.withComparatorMutex.Unlock()
	fake.WithComparatorStub = nil
	fake.withComparatorReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithComparatorReturnsOnCall(i int, result1 string) {
	fake.withComparatorMutex.Lock()
	defer fake.withComparatorMutex.Unlock()
	fake.WithComparatorStub = nil
	if fake.withComparatorReturnsOnCall == nil {
		fake.withComparatorReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.withComparatorReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithRest() string {
	fake.withRestMutex.Lock()
	ret, specificReturn := fake.withRestReturnsOnCall[len(fake.withRestArgsForCall)]
	fake.withRestArgsForCall = append(fake.withRestArgsForCall, struct {
	}{})
	fake.recordInvocation("WithRest", []interface{}{})
	fake.withRestMutex.Unlock()
	if fake.WithRestStub != nil {
		return fake.WithRestStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.withRestReturns
	return fakeReturns.result1
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithRestCallCount() int {
	fake.withRestMutex.RLock()
	defer fake.withRestMutex.RUnlock()
	return len(fake.withRestArgsForCall)
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithRestCalls(stub func() string) {
	fake.withRestMutex.Lock()
	defer fake.withRestMutex.Unlock()
	fake.WithRestStub = stub
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithRestReturns(result1 string) {
	fake.withRestMutex.Lock()
	defer fake.withRestMutex.Unlock()
	fake.WithRestStub = nil
	fake.withRestReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) WithRestReturnsOnCall(i int, result1 string) {
	fake.withRestMutex.Lock()
	defer fake.withRestMutex.Unlock()
	fake.WithRestStub = nil
	if fake.withRestReturnsOnCall == nil {
		fake.withRestReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.withRestReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTypeTwoQueryTemplateProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	fake.messageParamMutex.RLock()
	defer fake.messageParamMutex.RUnlock()
	fake.multipleParamMutex.RLock()
	defer fake.multipleParamMutex.RUnlock()
	fake.oneParamMutex.RLock()
	defer fake.oneParamMutex.RUnlock()
	fake.providerStubOnlyMutex.RLock()
	defer fake.providerStubOnlyMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.upsertMutex.RLock()
	defer fake.upsertMutex.RUnlock()
	fake.withComparatorMutex.RLock()
	defer fake.withComparatorMutex.RUnlock()
	fake.withRestMutex.RLock()
	defer fake.withRestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTypeTwoQueryTemplateProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ postgres_dal_multi.TypeTwoQueryTemplateProvider = new(FakeTypeTwoQueryTemplateProvider)
