// Code generated by counterfeiter. DO NOT EDIT.
package cachefakes

import (
	"context"
	"sync"

	"github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/single"
	cache_dal_single "github.com/rleszilm/genms/cmd/protoc-gen-go-genms-dal/example/single/dal/cache"
)

type FakeSingleWriter struct {
	SetStub        func(context.Context, cache_dal_single.SingleKey, *single.Single) (*single.Single, error)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 context.Context
		arg2 cache_dal_single.SingleKey
		arg3 *single.Single
	}
	setReturns struct {
		result1 *single.Single
		result2 error
	}
	setReturnsOnCall map[int]struct {
		result1 *single.Single
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSingleWriter) Set(arg1 context.Context, arg2 cache_dal_single.SingleKey, arg3 *single.Single) (*single.Single, error) {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 context.Context
		arg2 cache_dal_single.SingleKey
		arg3 *single.Single
	}{arg1, arg2, arg3})
	fake.recordInvocation("Set", []interface{}{arg1, arg2, arg3})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSingleWriter) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeSingleWriter) SetCalls(stub func(context.Context, cache_dal_single.SingleKey, *single.Single) (*single.Single, error)) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *FakeSingleWriter) SetArgsForCall(i int) (context.Context, cache_dal_single.SingleKey, *single.Single) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSingleWriter) SetReturns(result1 *single.Single, result2 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 *single.Single
		result2 error
	}{result1, result2}
}

func (fake *FakeSingleWriter) SetReturnsOnCall(i int, result1 *single.Single, result2 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 *single.Single
			result2 error
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 *single.Single
		result2 error
	}{result1, result2}
}

func (fake *FakeSingleWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSingleWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cache_dal_single.SingleWriter = new(FakeSingleWriter)
