// Package greeter is generated by protoc-gen-genms. *DO NOT EDIT*
package greeter

import (
	context "context"

	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	service "github.com/rleszilm/genms/service"
	grpc "github.com/rleszilm/genms/service/grpc"
	http "github.com/rleszilm/genms/service/http"
	grpc1 "google.golang.org/grpc"
)

// WithHTTPServiceConfig defines the basic configuration for a WithHTTPService
type WithHTTPServiceConfig struct {
	Name       string         `envconfig:"name" default:"with-http"`
	GrpcServer *grpc.Server   `ignored:"true"`
	HttpServer *http.Server   `ignored:"true"`
	Proxy      *service.Proxy `envconfig:"proxy"`
}

// WithHTTPService implements WithHTTPService
type WithHTTPService struct {
	service.UnimplementedService

	name   string
	config *WithHTTPServiceConfig

	impl       WithHTTPServer
	grpcServer *grpc.Server
	httpServer *http.Server
}

// Initialize implements service.Service.Initialize
func (s *WithHTTPService) Initialize(ctx context.Context) error {
	if s.grpcServer != nil {
		s.grpcServer.WithService(func(server *grpc1.Server) {
			RegisterWithHTTPServer(server, s.impl)
		})
	}

	if s.httpServer != nil {
		if s.config != nil && s.config.Proxy != nil {
			if s.config.Proxy.Mode == "remote" {
				if err := s.httpServer.WithRemoteGrpcProxy(ctx, s.config.Proxy, RegisterWithHTTPHandlerFromEndpoint); err != nil {
					return err
				}
			} else {
				localProxyRegistrar := func(ctx context.Context, mux *runtime.ServeMux) error {
					return RegisterWithHTTPHandlerServer(ctx, mux, s.impl)
				}
				if err := s.httpServer.WithLocalGrpcProxy(ctx, s.config.Proxy, localProxyRegistrar); err != nil {
					return err
				}
			}
		}
	}
	return nil
}

// Shutdown implements service.Service.Shutdown
func (s *WithHTTPService) Shutdown(_ context.Context) error {
	return nil
}

// String returns the name of the service
func (s *WithHTTPService) String() string {
	if s.name != "" {
		return s.name
	}
	return "with-http"
}

// WithName assigns a name to the service
func (s *WithHTTPService) WithName(name string) *WithHTTPService {
	s.name = name
	return s
}

// WithGrpcServer assigns a grpc server to the service.
func (s *WithHTTPService) WithGrpcServer(server *grpc.Server) *WithHTTPService {
	server.WithDependencies(s)
	s.grpcServer = server
	return s
}

// WithHttpServer assigns a http server to the service.
func (s *WithHTTPService) WithHttpServer(server *http.Server) *WithHTTPService {
	server.WithDependencies(s)
	s.httpServer = server
	return s
}

// NewWithHTTPService returns a new WithHTTPService
func NewWithHTTPService(impl WithHTTPServer, config *WithHTTPServiceConfig) *WithHTTPService {
	server := &WithHTTPService{
		name:   config.Name,
		impl:   impl,
		config: config,

		grpcServer: config.GrpcServer,
		httpServer: config.HttpServer,
	}

	if asService, ok := impl.(service.Service); ok {
		server.WithDependencies(asService)
	}

	return server
}
