// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: greeter.proto

package greeter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WithHTTPClient is the client API for WithHTTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithHTTPClient interface {
	HelloHTTPUU(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	HelloHTTPUS(ctx context.Context, in *Message, opts ...grpc.CallOption) (WithHTTP_HelloHTTPUSClient, error)
	HelloHTTPSU(ctx context.Context, opts ...grpc.CallOption) (WithHTTP_HelloHTTPSUClient, error)
	HelloHTTPSS(ctx context.Context, opts ...grpc.CallOption) (WithHTTP_HelloHTTPSSClient, error)
}

type withHTTPClient struct {
	cc grpc.ClientConnInterface
}

func NewWithHTTPClient(cc grpc.ClientConnInterface) WithHTTPClient {
	return &withHTTPClient{cc}
}

func (c *withHTTPClient) HelloHTTPUU(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/greeter.WithHTTP/HelloHTTPUU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withHTTPClient) HelloHTTPUS(ctx context.Context, in *Message, opts ...grpc.CallOption) (WithHTTP_HelloHTTPUSClient, error) {
	stream, err := c.cc.NewStream(ctx, &WithHTTP_ServiceDesc.Streams[0], "/greeter.WithHTTP/HelloHTTPUS", opts...)
	if err != nil {
		return nil, err
	}
	x := &withHTTPHelloHTTPUSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WithHTTP_HelloHTTPUSClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type withHTTPHelloHTTPUSClient struct {
	grpc.ClientStream
}

func (x *withHTTPHelloHTTPUSClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *withHTTPClient) HelloHTTPSU(ctx context.Context, opts ...grpc.CallOption) (WithHTTP_HelloHTTPSUClient, error) {
	stream, err := c.cc.NewStream(ctx, &WithHTTP_ServiceDesc.Streams[1], "/greeter.WithHTTP/HelloHTTPSU", opts...)
	if err != nil {
		return nil, err
	}
	x := &withHTTPHelloHTTPSUClient{stream}
	return x, nil
}

type WithHTTP_HelloHTTPSUClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type withHTTPHelloHTTPSUClient struct {
	grpc.ClientStream
}

func (x *withHTTPHelloHTTPSUClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *withHTTPHelloHTTPSUClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *withHTTPClient) HelloHTTPSS(ctx context.Context, opts ...grpc.CallOption) (WithHTTP_HelloHTTPSSClient, error) {
	stream, err := c.cc.NewStream(ctx, &WithHTTP_ServiceDesc.Streams[2], "/greeter.WithHTTP/HelloHTTPSS", opts...)
	if err != nil {
		return nil, err
	}
	x := &withHTTPHelloHTTPSSClient{stream}
	return x, nil
}

type WithHTTP_HelloHTTPSSClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type withHTTPHelloHTTPSSClient struct {
	grpc.ClientStream
}

func (x *withHTTPHelloHTTPSSClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *withHTTPHelloHTTPSSClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WithHTTPServer is the server API for WithHTTP service.
// All implementations must embed UnimplementedWithHTTPServer
// for forward compatibility
type WithHTTPServer interface {
	HelloHTTPUU(context.Context, *Message) (*Message, error)
	HelloHTTPUS(*Message, WithHTTP_HelloHTTPUSServer) error
	HelloHTTPSU(WithHTTP_HelloHTTPSUServer) error
	HelloHTTPSS(WithHTTP_HelloHTTPSSServer) error
	mustEmbedUnimplementedWithHTTPServer()
}

// UnimplementedWithHTTPServer must be embedded to have forward compatible implementations.
type UnimplementedWithHTTPServer struct {
}

func (UnimplementedWithHTTPServer) HelloHTTPUU(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloHTTPUU not implemented")
}
func (UnimplementedWithHTTPServer) HelloHTTPUS(*Message, WithHTTP_HelloHTTPUSServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloHTTPUS not implemented")
}
func (UnimplementedWithHTTPServer) HelloHTTPSU(WithHTTP_HelloHTTPSUServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloHTTPSU not implemented")
}
func (UnimplementedWithHTTPServer) HelloHTTPSS(WithHTTP_HelloHTTPSSServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloHTTPSS not implemented")
}
func (UnimplementedWithHTTPServer) mustEmbedUnimplementedWithHTTPServer() {}

// UnsafeWithHTTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithHTTPServer will
// result in compilation errors.
type UnsafeWithHTTPServer interface {
	mustEmbedUnimplementedWithHTTPServer()
}

func RegisterWithHTTPServer(s grpc.ServiceRegistrar, srv WithHTTPServer) {
	s.RegisterService(&WithHTTP_ServiceDesc, srv)
}

func _WithHTTP_HelloHTTPUU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithHTTPServer).HelloHTTPUU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greeter.WithHTTP/HelloHTTPUU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithHTTPServer).HelloHTTPUU(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithHTTP_HelloHTTPUS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WithHTTPServer).HelloHTTPUS(m, &withHTTPHelloHTTPUSServer{stream})
}

type WithHTTP_HelloHTTPUSServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type withHTTPHelloHTTPUSServer struct {
	grpc.ServerStream
}

func (x *withHTTPHelloHTTPUSServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _WithHTTP_HelloHTTPSU_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WithHTTPServer).HelloHTTPSU(&withHTTPHelloHTTPSUServer{stream})
}

type WithHTTP_HelloHTTPSUServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type withHTTPHelloHTTPSUServer struct {
	grpc.ServerStream
}

func (x *withHTTPHelloHTTPSUServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *withHTTPHelloHTTPSUServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WithHTTP_HelloHTTPSS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WithHTTPServer).HelloHTTPSS(&withHTTPHelloHTTPSSServer{stream})
}

type WithHTTP_HelloHTTPSSServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type withHTTPHelloHTTPSSServer struct {
	grpc.ServerStream
}

func (x *withHTTPHelloHTTPSSServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *withHTTPHelloHTTPSSServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WithHTTP_ServiceDesc is the grpc.ServiceDesc for WithHTTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithHTTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greeter.WithHTTP",
	HandlerType: (*WithHTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloHTTPUU",
			Handler:    _WithHTTP_HelloHTTPUU_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloHTTPUS",
			Handler:       _WithHTTP_HelloHTTPUS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloHTTPSU",
			Handler:       _WithHTTP_HelloHTTPSU_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloHTTPSS",
			Handler:       _WithHTTP_HelloHTTPSS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greeter.proto",
}
